syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package org.obapanel.lockfactoryserver.core.grpc;

option java_multiple_files = true;
option java_package = "org.obapanel.lockfactoryserver.core.grpc";
option java_outer_classname = "LockFactoryServer";

/**
 * Service that defines management services for GRPC
 */
service ManagementServer {

  /**
   * Shutdowns the server
   */
  rpc shutdownServer(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  /**
   * Checks if it is runnning, returnning true if running
   */
  rpc isRunning(google.protobuf.Empty) returns (google.protobuf.BoolValue) {}


}

/**
 * Service that makes a lock avalible
 */
service LockServer {

  rpc lock(google.protobuf.StringValue) returns (google.protobuf.StringValue) {}

  rpc tryLock(google.protobuf.StringValue) returns (google.protobuf.StringValue) {}

  rpc tryLockWithTimeOut(TryLockWithTimeout) returns (google.protobuf.StringValue) {}

  rpc lockStatus(NameTokenValues) returns (LockStatusValues) {}

  rpc unLock(NameTokenValues) returns (google.protobuf.BoolValue) {}

  rpc asyncLock(google.protobuf.StringValue) returns (google.protobuf.StringValue) {}

}

/**
 * Service that makes a semaphore avalible
 */
service SemaphoreServer {

  rpc currentPermits(google.protobuf.StringValue) returns (google.protobuf.Int32Value) {}

  rpc acquire(NamePermits) returns (google.protobuf.Empty) {}

  rpc tryAcquire(NamePermits) returns (google.protobuf.BoolValue) {}

  rpc tryAcquireWithTimeOut(NamePermitsWithTimeout) returns (google.protobuf.BoolValue) {}

  rpc release(NamePermits) returns (google.protobuf.Empty) {}

  rpc asyncAcquire(NamePermits) returns (google.protobuf.Empty) {}

}

/**
 * Service that makes a countdoenlatch avalible
 */
service CountDownLatchServer {

  rpc createNew(NameCount) returns (google.protobuf.BoolValue) {}

  rpc countDown(google.protobuf.StringValue) returns (google.protobuf.Empty) {}

  rpc getCount(google.protobuf.StringValue) returns (google.protobuf.Int32Value) {}

  rpc await(google.protobuf.StringValue) returns (google.protobuf.Empty) {}

  rpc tryAwait(google.protobuf.StringValue) returns (google.protobuf.BoolValue) {}

  rpc tryAwaitWithTimeOut(AwaitWithTimeout) returns (google.protobuf.BoolValue) {}

  rpc asyncAwait(google.protobuf.StringValue) returns (google.protobuf.Empty) {}

}

message NameTokenValues {
  string name = 1;
  string token = 2;
}

message TryLockWithTimeout {
  string name = 1;
  uint64 timeOut = 2;
  optional TimeUnitGrpc timeUnit = 3;
}

message LockStatusValues {
    LockStatus lockStatus = 1;
}

message NamePermits {
  string name = 1;
  uint32 permits = 2;
}

message NamePermitsWithTimeout {
  string name = 1;
  uint32 permits = 2;
  uint64 timeOut = 3;
  optional TimeUnitGrpc timeUnit = 4;
}

message NameCount {
  string name = 1;
  uint32 permits = 2;
}

message AwaitWithTimeout {
  string name = 1;
  uint64 timeOut = 2;
  optional TimeUnitGrpc timeUnit = 3;
}

enum LockStatus {
    ABSENT = 0; // No lock has been found
    UNLOCKED = 1; // Lock exists and its unlocked
    OWNER = 2; // Lock exists, is locked by caller
    OTHER = 3; // Lock exists, is locked by other
}

enum TimeUnitGrpc {
    MILLISECONDS = 0;
    SECONDS = 1;
    MINUTES = 2;
    HOURS = 3;
}
