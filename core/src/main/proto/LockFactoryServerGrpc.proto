syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package org.obapanel.lockfactoryserver.core.grpc;

option java_multiple_files = true;
option java_package = "org.obapanel.lockfactoryserver.core.grpc";
option java_outer_classname = "LockFactoryServer";

/**
 * Servic that defines management services for GRPC
 */
service ManagementServer {

  /**
   * Shutdowns the server
   */
  rpc shutdownServer(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  /**
   * Checks if it is runnning, returnning true if running
   */
  rpc isRunning(google.protobuf.Empty) returns (google.protobuf.BoolValue) {}


}
/*

 */

// for LockServerGrpc java class
service LockServer {

  rpc lock(google.protobuf.StringValue) returns (google.protobuf.StringValue) {}

  rpc tryLock(TrylockValues) returns (google.protobuf.StringValue) {}

  rpc lockStatus(NameTokenValues) returns (LockStatusValues) {}

  rpc unLock(NameTokenValues) returns (google.protobuf.BoolValue) {}

  rpc asyncLock1(google.protobuf.StringValue) returns (stream google.protobuf.StringValue) {}

  rpc asyncLock2(google.protobuf.StringValue) returns (google.protobuf.StringValue) {}

}

// for SemaphoreServerGrpc java class
service SemaphoreServer {

  rpc currentPermits(google.protobuf.StringValue) returns (google.protobuf.Int32Value) {}

  rpc acquire(NamePermits) returns (google.protobuf.Empty) {}

  rpc asyncAcquire(NamePermits) returns (google.protobuf.Empty) {}

  rpc tryAcquire(TryAcquirekValues) returns (google.protobuf.BoolValue) {}

  rpc release(NamePermits) returns (google.protobuf.Empty) {}

}

message NameTokenValues {
  string name = 1;
  string token = 2;
}

message TrylockValues {
  oneof TrylockValuesOneof {
    string name = 1;
    TrylockValuesWithTimeout tryLockValuesWithTimeout = 2;
  }
}

message TrylockValuesWithTimeout {
  string name = 1;
  uint64 time = 2;
  TimeUnit timeUnit = 3;
}

message LockStatusValues {
    LockStatus lockStatus = 1;
}

message NamePermits {
  string name = 1;
  uint32 permits = 2;
}

message NamePermitsWithTimeout {
  string name = 1;
  uint32 permits = 2;
  uint64 time = 3;
  TimeUnit timeUnit = 4;
}

message TryAcquirekValues {
  oneof TryAcquireValuesOneof {
    NamePermits namePermits = 1;
    NamePermitsWithTimeout namePermitsWithTimeout = 2;
  }
}

enum LockStatus {
    ABSENT = 0; // No lock has been found
    UNLOCKED = 1; // Lock exists and its unlocked
    OWNER = 2; // Lock exists, is locked by caller
    OTHER = 3; // Lock exists, is locked by other
}

enum TimeUnit {
    MILLISECONDS = 0;
    SECONDS = 1;
    MINUTES = 2;
    HOURS = 3;
}